/**
 * H2MS: Hand Hygiene Monitoring System
 * This is the draft API design for H2MS.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';

import {Observable} from 'rxjs/Observable';
import '../rxjs-operators';

import {ComplianceReport} from '../model/complianceReport';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';


@Injectable()
export class ComplianceService {

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    protected basePath = 'https://localhost:8081/api';

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string,
                @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Show a hospital&#39;s compliance report
     * Returns details about a hospital&#39;s compliance
     * @param id Hospital id to show
     */
    public showHospitalCompliance(id: number): Observable<ComplianceReport> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showHospitalCompliance.');
        }

        let headers = this.defaultHeaders;

        // authentication (h2ms_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.get<any>(`${this.basePath}/hospital/${encodeURIComponent(String(id))}/compliance`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Show a hospital ward&#39;s compliance report
     * Returns details about a hospital ward&#39;s compliance
     * @param hospitalId Hospital id to show
     * @param id Ward id to show
     */
    public showHospitalWardCompliance(hospitalId: number, id: number): Observable<ComplianceReport> {
        if (hospitalId === null || hospitalId === undefined) {
            throw new Error('Required parameter hospitalId was null or undefined when calling showHospitalWardCompliance.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showHospitalWardCompliance.');
        }

        let headers = this.defaultHeaders;

        // authentication (h2ms_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.get<any>(
            `${this.basePath}/hospital/${encodeURIComponent(String(hospitalId))}/ward/${encodeURIComponent(String(id))}/compliance`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Show a user&#39;s compliance report
     * Returns details about a user&#39;s compliance
     * @param id User id to show
     */
    public showUserCompliance(id: number): Observable<ComplianceReport> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showUserCompliance.');
        }

        let headers = this.defaultHeaders;

        // authentication (h2ms_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.get<any>(`${this.basePath}/user/${encodeURIComponent(String(id))}/compliance`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

}
